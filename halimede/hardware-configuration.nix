# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  pkgs,
  modulesPath,
  ...
}:

{
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];
  virtualisation.docker.storageDriver = "btrfs";

  # See https://bbs.archlinux.org/viewtopic.php?pid=2003004#p2003004
  boot.kernelParams = [
    "amdgpu.noretry=0"
    "amdgpu.lockup_timeout=1000"
    "amdgpu.gpu_recovery=1"
    "amdgpu.audio=0"
    "pcie_aspm=off"
  ];
  hardware.enableAllFirmware = true;
  boot.initrd.luks.devices = {
    root = {
      device = "/dev/disk/by-uuid/af12f7f0-c102-4315-b02b-cdc9d592d549";
      preLVM = true;
    };
  };
  boot.kernelPackages = pkgs.linuxPackages_latest;

  boot.initrd.availableKernelModules = [
    "nvme"
    "xhci_pci"
    "ahci"
    "thunderbolt"
    "usb_storage"
    "usbhid"
    "sd_mod"
  ];
  boot.initrd.kernelModules = [ "dm-snapshot" ];
  boot.kernelModules = [
    "kvm-amd"
    "amdgpu"
  ];
  boot.extraModulePackages = [ ];

  # Prevent black screen when waking up from suspend, see
  # https://gitlab.freedesktop.org/drm/amd/-/issues/3580 and
  # https://bugzilla.kernel.org/show_bug.cgi?id=219514
  powerManagement.powerDownCommands = "${pkgs.util-linux}/bin/rfkill block bluetooth";
  powerManagement.resumeCommands = "${pkgs.util-linux}/bin/rfkill unblock bluetooth";

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/08f493eb-74aa-416c-980c-4d050440386e";
    fsType = "btrfs";
    options = [
      "subvol=root"
      "compress=zstd"
      "noatime"
    ];
  };

  fileSystems."/mnt/upp/services" = {
    device = "/home/ralf/repos/upp/services";
    options = [
      "bind"
      "X-mount.idmap=u:1000:1001:1 g:100:1001:1"
    ];
  };

  fileSystems."/mnt/upp/frontends" = {
    device = "/home/ralf/repos/upp/frontends";
    options = [
      "bind"
      "X-mount.idmap=u:1000:1001:1 g:100:1001:1"
    ];
  };

  fileSystems."/home" = {
    device = "/dev/disk/by-uuid/08f493eb-74aa-416c-980c-4d050440386e";
    fsType = "btrfs";
    options = [
      "subvol=home"
      "compress=zstd"
      "noatime"
    ];
  };

  fileSystems."/nix" = {
    device = "/dev/disk/by-uuid/08f493eb-74aa-416c-980c-4d050440386e";
    fsType = "btrfs";
    options = [
      "subvol=nix"
      "compress=zstd"
      "noatime"
    ];
  };

  fileSystems."/var/lib/docker" = {
    device = "/dev/disk/by-uuid/08f493eb-74aa-416c-980c-4d050440386e";
    fsType = "btrfs";
    options = [
      "subvol=docker"
      "compress=zstd"
      "noatime"
    ];
  };

  fileSystems."/var/log" = {
    device = "/dev/disk/by-uuid/08f493eb-74aa-416c-980c-4d050440386e";
    fsType = "btrfs";
    options = [
      "subvol=log"
      "compress=zstd"
      "noatime"
    ];
    neededForBoot = true;
  };

  fileSystems."/boot" = {
    device = "/dev/disk/by-uuid/EABD-882A";
    fsType = "vfat";
    #options = [ "fmask=0022" "dmask=0022" ];
  };

  fileSystems."/var/lib/libvirt/images" = {
    device = "/dev/disk/by-uuid/d3463b03-9b0f-4fa7-a6ec-d8de6d241d3f";
    fsType = "xfs";
  };

  swapDevices = [
    { device = "/dev/disk/by-uuid/15f41c50-25e6-4241-8d26-13c5dd2c57d9"; }
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp114s0f4u1u2.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlp6s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
